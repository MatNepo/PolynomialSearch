
%                 1. Вычисление мат. ожиданий

% Создание вектора множества занчений y
y = [
0.9804  18.5756  21.5603  35.8649  41.9397  57.8564;
1.4286  18.5735  21.1411  36.0852  42.0414  57.1727;
1.3475  19.1585  21.3784  35.8312  42.3798  58.2495;
1.7985  18.8075  22.2480  36.0961  42.5143  58.3126;
0.6506  18.6963  21.7131  36.4700  42.1848  57.7973;
1.0413  18.2677  21.6050  35.9774  41.8115  58.3447
];

% число экспериментов
tests_amount = 6;
% Инициализация пустого вектора для хранения решений
y_average = zeros(1,tests_amount);
% Подсчёт s_i
for i = 1:tests_amount
    % s_n - сумма от 1 до n, обнуляем сумму после нахождения s_i^2
    s_n = 0;
    
    % Перебор всех комбинаций элементов из двух векторов
    for j = 1:tests_amount
        % Укажем элемент матрицы, который рассматриваем в данный момент
        % внутри цикла
        element_matrix = y(i,j);
        % Решение уравнения с использованием текущего элемента
        s_n = s_n + element_matrix;
    end
    
    % Добавление значение s_i
    y_average(i) = s_n/tests_amount;
end

disp('Вычислим мат. ожидания y:');
for k = 1:tests_amount
    % Вывод множества решений с 5 знаками после запятой
    fprintf('y_average_%d = %.8f\n', k, y_average(k));
end



%                  2. Вычисление дисперсии

% Инициализация пустого вектора для хранения решений
s_i = zeros(1,tests_amount);
% Подсчёт s_i
for i = 1:(length(y_average))
    % s_n - сумма от 1 до n, обнуляем сумму после нахождения s_i^2
    s_n = 0;
    
    % Перебор всех комбинаций элементов из двух векторов
    for j = 1:tests_amount
        % Укажем элемент матрицы и вектора, который рассматриваем в данный
        % момент внутри цикла
        element_matrix = y(i,j);
        element_vector = y_average(j);
        % Решение уравнения с использованием элементов, указанных выше
        s_n = s_n + ((element_matrix-element_vector)^2);
    end
    
    % Добавление значение s_i
    s_i(i) = s_n/(j-1);
end

fprintf('\nМножество решений s_i^2:\n');
for k = 1:tests_amount
    % Вывод множества решений
    disp(['s_', num2str(k),' = ', sprintf('%.8f', s_i(k))]);
end




%                 3. Проверка выполнения гипотезы Кочрена
%                       и выбора метода обработки

% Нахождение максимального значения среди s_i
max_s_i = max(s_i());
fprintf('\nmax s_i^2 = %f\n', max_s_i);
% Обнуляем сумму
sum_s_i = 0;

fprintf('\nНайдём критерий G:\n');
for g = 1:tests_amount
    sum_s_i = sum_s_i + s_i(g);
end
G = max_s_i / sum_s_i;
disp(['G = ', sprintf('%.8f', G)]);
